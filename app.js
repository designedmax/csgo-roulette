let tg = window.Telegram.WebApp;
tg.expand();

// Add error handling for Telegram WebApp initialization
if (!tg) {
    console.error('Telegram WebApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    document.body.innerHTML = '<div class="error-message">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</div>';
}

document.addEventListener('DOMContentLoaded', () => {
    try {
        // Add error handling for user data
        const userAvatar = document.getElementById('user-avatar');
        const username = document.getElementById('username');
        
        if (!userAvatar || !username) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞');
        }

        // Add loading state
        document.body.classList.add('loading');

        // Initialize user data with error handling
        if (tg.initDataUnsafe?.user) {
            userAvatar.src = tg.initDataUnsafe.user.photo_url || 'default-avatar.png';
            username.textContent = tg.initDataUnsafe.user.username || '–ò–≥—Ä–æ–∫';
        }

        // Remove loading state
        document.body.classList.remove('loading');

        // Roulette logic
        const rouletteButtons = document.querySelectorAll('.roulette-btn');
        const resultDiv = document.getElementById('result');
        const skinResult = document.getElementById('skin-result');
        const spinAgain = document.getElementById('spin-again');
        const historyList = document.getElementById('history-list');
    
        rouletteButtons.forEach(button => {
            button.addEventListener('click', () => handleSpin(button));
        });
    
        spinAgain.addEventListener('click', () => {
            resultDiv.classList.add('hidden');
        });
    
        function handleSpin(button) {
            const price = button.dataset.price;
            button.classList.add('loading');
            
            // Simulate spin delay
            setTimeout(() => {
                button.classList.remove('loading');
                showResult(price);
            }, 2000);
        }
    
        function showResult(price) {
            resultDiv.classList.remove('hidden');
            const won = Math.random() > 0.5;
            
            const result = {
                price: price,
                won: won,
                skin: won ? getRandomSkin() : 'No win'
            };
    
            updateHistory(result);
            displayResult(result);
        }
    
        function getRandomSkin() {
            const skins = {
                common: [
                    { name: 'P250 | –ü–µ—Å—á–∞–Ω–∞—è –¥—é–Ω–∞', chance: 0.5 },
                    { name: 'MP7 | –õ–µ—Å–Ω–æ–π DDPAT', chance: 0.5 }
                ],
                rare: [
                    { name: 'AK-47 | –ê–∑–∏–º–æ–≤', chance: 0.2 },
                    { name: 'M4A4 | –ù–µ–æ-–ù—É–∞—Ä', chance: 0.2 }
                ],
                legendary: [
                    { name: 'AWP | –î—Ä–∞–∫–æ–Ω–∏–π –ª–æ—Ä', chance: 0.05 },
                    { name: '–ù–æ–∂-–±–∞–±–æ—á–∫–∞ | –ì—Ä–∞–¥–∏–µ–Ω—Ç', chance: 0.05 }
                ]
            };
        
            const roll = Math.random();
            let category;
            
            if (roll < 0.1) category = 'legendary';
            else if (roll < 0.3) category = 'rare';
            else category = 'common';
        
            const categoryItems = skins[category];
            return {
                item: categoryItems[Math.floor(Math.random() * categoryItems.length)].name,
                rarity: category
            };
        }
    
        function updateHistory(result) {
            const entry = document.createElement('div');
            entry.className = `history-entry ${result.won ? 'win' : 'lose'}`;
            entry.innerHTML = `
                <span>${result.price}‚ÇΩ - ${result.won ? result.skin : '–ù–µ –≤—ã–∏–≥—Ä–∞–ª'}</span>
                <span>${new Date().toLocaleTimeString()}</span>
            `;
            historyList.insertBefore(entry, historyList.firstChild);
        }
    
        function displayResult(result) {
            skinResult.innerHTML = result.won 
                ? `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${result.skin}!`
                : '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –ø–æ–≤–µ–∑–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!';
        }
        
        // Add new functions with Russian text
        function showDailyBonus() {
            const bonus = Math.floor(Math.random() * 500) + 100;
            tg.showPopup({
                title: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!',
                message: `–í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: ${bonus}‚ÇΩ`,
                buttons: [{type: 'ok'}]
            });
            localStorage.setItem('lastBonusDate', new Date().toDateString());
        }
        
        function unlockAchievement(id) {
            const achievements = {
                firstWin: { title: '–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞', description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Å–∫–∏–Ω' },
                bigSpender: { title: '–ë–æ–ª—å—à–æ–π –∏–≥—Ä–æ–∫', description: '–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –≤ 1000‚ÇΩ' },
                luckyStreak: { title: '–°—á–∞—Å—Ç–ª–∏–≤–∞—è —Å–µ—Ä–∏—è', description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥' }
            };
        
            localStorage.setItem(`achievement_${id}`, 'true');
            tg.showPopup({
                title: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!',
                message: `${achievements[id].title}\n${achievements[id].description}`
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        tg.showPopup({
            title: '–û—à–∏–±–∫–∞',
            message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            buttons: [{type: 'ok'}]
        });
    }
});
