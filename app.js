let tg = window.Telegram.WebApp;
let userBalance = parseInt(localStorage.getItem('userBalance')) || 1000;
let achievements = ['new_player'];
let registrationDate = localStorage.getItem('registrationDate') || new Date().toISOString();
if (!localStorage.getItem('registrationDate')) {
    localStorage.setItem('registrationDate', registrationDate);
}
if (localStorage.getItem('achievements')) {
    const storedAchievements = JSON.parse(localStorage.getItem('achievements'));
    if (!storedAchievements.includes('new_player')) {
        storedAchievements.push('new_player');
    }
    achievements = storedAchievements;
}
let winCount = parseInt(localStorage.getItem('winCount')) || 0;
let loseCount = parseInt(localStorage.getItem('loseCount')) || 0;
let lastBonusDate = localStorage.getItem('lastBonusDate') || null;

tg.expand();

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const user = tg.initDataUnsafe.user;
let userName = "–ò–≥—Ä–æ–∫";

if (user) {
    if (user.first_name) userName = user.first_name;
}

// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–º—è –∏ –∞–≤–∞—Ç–∞—Ä
document.getElementById("username").textContent = userName;
document.getElementById("user-avatar").src = user?.photo_url || "https://via.placeholder.com/50";

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫–∏–Ω–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)
const skins = [
    { name: "AK-47 | –ö—Ä–∞—Å–Ω–∞—è –ª–∏–Ω–∏—è", price: 500 },
    { name: "AWP | –§–µ—è", price: 1000 },
    { name: "M4A4 | –ö—Ä—É—à–∏—Ç–µ–ª—å", price: 300 },
    { name: "–ù–æ–∂ | –ë–∞–±–æ—á–∫–∞", price: 5000 },
    { name: "–í–∏–ª–∫–∞ | –í –∂–æ–ø—É", price: 300 },
    { name: "–§–∞–∫ | –ù–∞—Ö", price: 100 },
];

// –ö—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –±–∞–ª–∞–Ω—Å–∞
function updateBalance(amount) {
    userBalance += amount;
    localStorage.setItem('userBalance', userBalance);
    document.getElementById('balance').textContent = userBalance;
}

function checkAchievement(type, value) {
    const achievementsList = {
        'first_win': { title: '–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞', condition: 1 },
        'big_win': { title: '–ö—Ä—É–ø–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à', condition: 1000 },
        'balance': { title: '–ë–æ–≥–∞—á', condition: 5000 },
        'new_player': { title: '–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫', condition: 0 },
        'winner': { title: '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å', condition: 10 },
        'loser': { title: '–õ–æ—à–æ–∫', condition: 30 }
    };

    if (!achievements.includes(type)) {
        if (type === 'winner') {
            const history = JSON.parse(localStorage.getItem('csgoRouletteHistory')) || [];
            const totalWins = history.filter(entry => entry.status === 'win').length;
            if (totalWins >= achievementsList[type].condition) {
                achievements.push(type);
                localStorage.setItem('achievements', JSON.stringify(achievements));
                updateAchievementsUI();
            }
        } else if ((type === 'balance' && userBalance >= value) ||
            (type === 'big_win' && value >= achievementsList[type].condition)) {
            achievements.push(type);
            localStorage.setItem('achievements', JSON.stringify(achievements));
            updateAchievementsUI();
        }
    }
}

function claimDailyBonus() {
    const today = new Date().toDateString();
    if (lastBonusDate !== today) {
        updateBalance(5000);
        lastBonusDate = today;
        localStorage.setItem('lastBonusDate', lastBonusDate);
        alert('–ü–æ–ª—É—á–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: 5000 ‚ÇΩ!');
    } else {
        alert('–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –±–æ–Ω—É—Å!');
    }
}

function spinRoulette(price) {
    if (userBalance < price) {
        alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!');
        return;
    }

    updateBalance(-price);
    const winChance = 0.4;
    const isWin = Math.random() < winChance;
    const resultElement = document.getElementById("skin-result");
    const resultContainer = document.getElementById("result");
    const rouletteButtons = document.querySelectorAll(".roulette-btn");

    rouletteButtons.forEach(btn => btn.disabled = true);
    resultElement.innerHTML = `<div class="spinner">üéÆ</div>`;
    resultContainer.classList.remove("hidden");

    let spinTime = 0;
    const spinInterval = setInterval(() => {
        spinTime += 100;
        const emojis = ["üî´", "üí£", "üî™", "üí∞", "üéØ"];
        resultElement.innerHTML = `<div class="spinner">${emojis[Math.floor(Math.random() * emojis.length)]}</div>`;

        if (spinTime >= 3000) {
            clearInterval(spinInterval);
            showResult(isWin, price);
            rouletteButtons.forEach(btn => btn.disabled = false);
            
            if (isWin) {
                updateBalance(price * 2);
                winCount++;
                localStorage.setItem('winCount', winCount);
                checkAchievement('first_win');
                if (price >= 500) checkAchievement('big_win', price);
                if (winCount >= 10) checkAchievement('winner');
            } else {
                loseCount++;
                localStorage.setItem('loseCount', loseCount);
                if (loseCount >= 30) checkAchievement('loser');
            }
            checkAchievement('balance', userBalance);
        }
    }, 100);
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
function showResult(isWin, betAmount) {
    const resultElement = document.getElementById("skin-result");
    const randomSkin = skins[Math.floor(Math.random() * skins.length)];

    if (isWin) {
        resultElement.innerHTML = `
            <p>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏:</p>
            <h4>${randomSkin.name}</h4>
            <p>–¶–µ–Ω–∞: ${randomSkin.price} ‚ÇΩ</p>
        `;
        saveToHistory("win", randomSkin.name, randomSkin.price, betAmount);
    } else {
        resultElement.innerHTML = "<p>üò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏.</p>";
        saveToHistory("lose", "–ù–∏—á–µ–≥–æ", 0, betAmount);
    }
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
function saveToHistory(status, skinName, skinPrice, betAmount) {
    const history = JSON.parse(localStorage.getItem("csgoRouletteHistory")) || [];
    const newEntry = {
        date: new Date().toLocaleString(),
        bet: betAmount,
        status: status,
        skin: skinName,
        prize: status === "win" ? skinPrice : 0,
    };
    history.unshift(newEntry);
    localStorage.setItem("csgoRouletteHistory", JSON.stringify(history));
    updateHistoryUI();
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞ —ç–∫—Ä–∞–Ω–µ
function clearHistory() {
    localStorage.removeItem("csgoRouletteHistory");
    updateHistoryUI();
}

function updateProfileStats() {
    const totalGames = winCount + loseCount;
    const winRate = totalGames > 0 ? Math.round((winCount / totalGames) * 100) : 0;
    
    document.getElementById('registration-date').textContent = new Date(registrationDate).toLocaleDateString();
    document.getElementById('total-games').textContent = totalGames;
    document.getElementById('win-rate').textContent = `${winRate}%`;
}

function updateHistoryUI() {
    const historyList = document.getElementById("history-list");
    const history = JSON.parse(localStorage.getItem("csgoRouletteHistory")) || [];
    
    historyList.innerHTML = history.length === 0 
        ? "<p>–°—Ç–∞–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.</p>"
        : history.map(entry => `
            <div class="history-entry ${entry.status}">
                <span>${entry.date}</span>
                <span>–°—Ç–∞–≤–∫–∞: ${entry.bet} ‚ÇΩ</span>
                <span>${entry.status === "win" ? "üèÜ " + entry.skin : "‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à"}</span>
            </div>
        `).join("");
    
    updateProfileStats();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è
function navigateToProfile() {
    window.location.href = 'profile.html';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
function navigateToMain() {
    window.location.href = 'index.html';
}

document.addEventListener('DOMContentLoaded', () => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∞–ª–∞–Ω—Å
    document.getElementById('username').textContent = userName;
    const balanceElement = document.getElementById('balance');
    if (balanceElement) balanceElement.textContent = userBalance;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const avatarElement = document.getElementById('user-avatar');
    if (user && user.photo_url) {
        avatarElement.src = user.photo_url;
    } else {
        avatarElement.src = 'https://via.placeholder.com/60';
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    const profileBtn = document.getElementById('profile-btn');
    if (profileBtn) profileBtn.addEventListener('click', navigateToProfile);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    const backBtn = document.getElementById('back-to-main');
    if (backBtn) backBtn.addEventListener('click', navigateToMain);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä—É–ª–µ—Ç–∫–∏
    document.querySelectorAll('.roulette-btn').forEach(button => {
        button.addEventListener('click', () => {
            const price = parseInt(button.dataset.price);
            tg.showPopup({
                title: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏",
                message: `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å ${price} ‚ÇΩ?`,
                buttons: [
                    { id: "confirm", type: "ok", text: "–î–∞" },
                    { id: "cancel", type: "cancel", text: "–ù–µ—Ç" },
                ],
            }, (buttonId) => {
                if (buttonId === "confirm") spinRoulette(price);
            });
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö—Ä—É—Ç–∏—Ç—å —Å–Ω–æ–≤–∞"
    document.getElementById('spin-again').addEventListener('click', () => {
        document.getElementById('result').classList.add('hidden');
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±–∞–ª–∞–Ω—Å–∞
    document.getElementById('deposit').addEventListener('click', () => {
        const amount = parseInt(prompt('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:'));
        if (amount && amount > 0) {
            updateBalance(amount);
        }
    });

    document.getElementById('withdraw').addEventListener('click', () => {
        const amount = parseInt(prompt('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:'));
        if (amount && amount > 0 && amount <= userBalance) {
            updateBalance(-amount);
        } else {
            alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞!');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
    document.getElementById('claim-bonus').addEventListener('click', claimDailyBonus);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    updateHistoryUI();
    updateAchievementsUI();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
    document.getElementById('clear-history').addEventListener('click', () => {
        tg.showPopup({
            title: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            message: "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫?",
            buttons: [
                { id: "confirm", type: "destructive", text: "–î–∞, –æ—á–∏—Å—Ç–∏—Ç—å" },
                { id: "cancel", type: "cancel", text: "–û—Ç–º–µ–Ω–∞" },
            ],
        }, (buttonId) => {
            if (buttonId === "confirm") clearHistory();
        });
    });
});

function updateAchievementsUI() {
    const achievementsList = document.getElementById('achievements-list');
    const allAchievements = [
        { id: 'new_player', title: '–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫', description: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É!' },
        { id: 'first_win', title: '–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞', description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Å–∫–∏–Ω' },
        { id: 'big_win', title: '–ö—Ä—É–ø–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à', description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –æ—Ç 1000‚ÇΩ' },
        { id: 'balance', title: '–ë–æ–≥–∞—á', description: '–ù–∞–∫–æ–ø–∏—Ç–µ 5000‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ' },
        { id: 'winner', title: '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å', description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ 10 —Ä–∞–∑' },
        { id: 'loser', title: '–õ–æ—à–æ–∫', description: '–ü—Ä–æ–∏–≥—Ä–∞–π—Ç–µ 30 —Ä–∞–∑' }
    ];

    achievementsList.innerHTML = allAchievements.map(ach => `
        <div class="achievement-item ${achievements.includes(ach.id) ? 'unlocked' : ''}">
            <h4>${ach.title}</h4>
            <p>${ach.description}</p>
        </div>
    `).join('');
}
